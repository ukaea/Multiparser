stages:
  - Install
  - Testing and Quality
  - SonarQube

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip

Build Virtual Environment:
  stage: Install
  image: "python:3.10.12-slim-bullseye"
  tags:
    - ubuntu
    - lower-privacy
  script:
    - pip install --upgrade pip
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install --all-extras
  artifacts:
    untracked: false
    when: on_success
    expire_in: "1 hr"
    paths:
      - .venv

.setup_template_unit: &setup_unit
  image: "python:3.10"
  needs:
    - Build Virtual Environment
  tags:
    - ubuntu
    - lower-privacy
  before_script:
    - pip install poetry
    - poetry config virtualenvs.in-project true

Unit Tests:
  stage: Testing and Quality
  <<: *setup_unit
  script:
    - poetry config virtualenvs.in-project true
    - poetry run pytest tests --cov=multiparser --cov-report=xml --cov-report=term
  artifacts:
    untracked: false
    expire_in: "1 hr"
    paths:
      - "coverage*"


Security:
  stage: Testing and Quality
  <<: *setup_unit
  allow_failure: true
  script:
    - poetry run bandit -r multiparser -lll -v
    - poetry run bandit -r multiparser -lll -f json -o bandit.json
  artifacts:
    untracked: false
    expire_in: "1 hr"
    paths:
      - "bandit.json"
  except:
      - tags



sonarqube-check:
  stage: SonarQube
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  needs: ["Security", "Unit Tests"]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - main
